// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: cln_plugin.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClnPluginClient is the client API for ClnPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClnPluginClient interface {
	HtlcStream(ctx context.Context, opts ...grpc.CallOption) (ClnPlugin_HtlcStreamClient, error)
	CustomMsgStream(ctx context.Context, in *CustomMessageRequest, opts ...grpc.CallOption) (ClnPlugin_CustomMsgStreamClient, error)
}

type clnPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewClnPluginClient(cc grpc.ClientConnInterface) ClnPluginClient {
	return &clnPluginClient{cc}
}

func (c *clnPluginClient) HtlcStream(ctx context.Context, opts ...grpc.CallOption) (ClnPlugin_HtlcStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClnPlugin_ServiceDesc.Streams[0], "/ClnPlugin/HtlcStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &clnPluginHtlcStreamClient{stream}
	return x, nil
}

type ClnPlugin_HtlcStreamClient interface {
	Send(*HtlcResolution) error
	Recv() (*HtlcAccepted, error)
	grpc.ClientStream
}

type clnPluginHtlcStreamClient struct {
	grpc.ClientStream
}

func (x *clnPluginHtlcStreamClient) Send(m *HtlcResolution) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clnPluginHtlcStreamClient) Recv() (*HtlcAccepted, error) {
	m := new(HtlcAccepted)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clnPluginClient) CustomMsgStream(ctx context.Context, in *CustomMessageRequest, opts ...grpc.CallOption) (ClnPlugin_CustomMsgStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClnPlugin_ServiceDesc.Streams[1], "/ClnPlugin/CustomMsgStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &clnPluginCustomMsgStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClnPlugin_CustomMsgStreamClient interface {
	Recv() (*CustomMessage, error)
	grpc.ClientStream
}

type clnPluginCustomMsgStreamClient struct {
	grpc.ClientStream
}

func (x *clnPluginCustomMsgStreamClient) Recv() (*CustomMessage, error) {
	m := new(CustomMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClnPluginServer is the server API for ClnPlugin service.
// All implementations must embed UnimplementedClnPluginServer
// for forward compatibility
type ClnPluginServer interface {
	HtlcStream(ClnPlugin_HtlcStreamServer) error
	CustomMsgStream(*CustomMessageRequest, ClnPlugin_CustomMsgStreamServer) error
	mustEmbedUnimplementedClnPluginServer()
}

// UnimplementedClnPluginServer must be embedded to have forward compatible implementations.
type UnimplementedClnPluginServer struct {
}

func (UnimplementedClnPluginServer) HtlcStream(ClnPlugin_HtlcStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HtlcStream not implemented")
}
func (UnimplementedClnPluginServer) CustomMsgStream(*CustomMessageRequest, ClnPlugin_CustomMsgStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CustomMsgStream not implemented")
}
func (UnimplementedClnPluginServer) mustEmbedUnimplementedClnPluginServer() {}

// UnsafeClnPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClnPluginServer will
// result in compilation errors.
type UnsafeClnPluginServer interface {
	mustEmbedUnimplementedClnPluginServer()
}

func RegisterClnPluginServer(s grpc.ServiceRegistrar, srv ClnPluginServer) {
	s.RegisterService(&ClnPlugin_ServiceDesc, srv)
}

func _ClnPlugin_HtlcStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClnPluginServer).HtlcStream(&clnPluginHtlcStreamServer{stream})
}

type ClnPlugin_HtlcStreamServer interface {
	Send(*HtlcAccepted) error
	Recv() (*HtlcResolution, error)
	grpc.ServerStream
}

type clnPluginHtlcStreamServer struct {
	grpc.ServerStream
}

func (x *clnPluginHtlcStreamServer) Send(m *HtlcAccepted) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clnPluginHtlcStreamServer) Recv() (*HtlcResolution, error) {
	m := new(HtlcResolution)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ClnPlugin_CustomMsgStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CustomMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClnPluginServer).CustomMsgStream(m, &clnPluginCustomMsgStreamServer{stream})
}

type ClnPlugin_CustomMsgStreamServer interface {
	Send(*CustomMessage) error
	grpc.ServerStream
}

type clnPluginCustomMsgStreamServer struct {
	grpc.ServerStream
}

func (x *clnPluginCustomMsgStreamServer) Send(m *CustomMessage) error {
	return x.ServerStream.SendMsg(m)
}

// ClnPlugin_ServiceDesc is the grpc.ServiceDesc for ClnPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClnPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClnPlugin",
	HandlerType: (*ClnPluginServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HtlcStream",
			Handler:       _ClnPlugin_HtlcStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CustomMsgStream",
			Handler:       _ClnPlugin_CustomMsgStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cln_plugin.proto",
}
