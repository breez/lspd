// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.4
// source: history.proto

package history

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExportForwardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start unix timestamp (seconds)
	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// End unix timestamp (seconds)
	End int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	// Node id of the node that forwarded the payments.
	Nodeid []byte `protobuf:"bytes,3,opt,name=nodeid,proto3" json:"nodeid,omitempty"`
	// Node id of the peer lsp to export this data for.
	ExternalNodeid []byte `protobuf:"bytes,4,opt,name=external_nodeid,json=externalNodeid,proto3" json:"external_nodeid,omitempty"`
}

func (x *ExportForwardsRequest) Reset() {
	*x = ExportForwardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_history_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportForwardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportForwardsRequest) ProtoMessage() {}

func (x *ExportForwardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportForwardsRequest.ProtoReflect.Descriptor instead.
func (*ExportForwardsRequest) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{0}
}

func (x *ExportForwardsRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ExportForwardsRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *ExportForwardsRequest) GetNodeid() []byte {
	if x != nil {
		return x.Nodeid
	}
	return nil
}

func (x *ExportForwardsRequest) GetExternalNodeid() []byte {
	if x != nil {
		return x.ExternalNodeid
	}
	return nil
}

type ExportForwardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Forwards []*ExportedForward `protobuf:"bytes,1,rep,name=forwards,proto3" json:"forwards,omitempty"`
}

func (x *ExportForwardsResponse) Reset() {
	*x = ExportForwardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_history_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportForwardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportForwardsResponse) ProtoMessage() {}

func (x *ExportForwardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportForwardsResponse.ProtoReflect.Descriptor instead.
func (*ExportForwardsResponse) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{1}
}

func (x *ExportForwardsResponse) GetForwards() []*ExportedForward {
	if x != nil {
		return x.Forwards
	}
	return nil
}

type ImportExternalForwardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Forwards []*ExportedForward `protobuf:"bytes,1,rep,name=forwards,proto3" json:"forwards,omitempty"`
}

func (x *ImportExternalForwardsRequest) Reset() {
	*x = ImportExternalForwardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_history_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportExternalForwardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportExternalForwardsRequest) ProtoMessage() {}

func (x *ImportExternalForwardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportExternalForwardsRequest.ProtoReflect.Descriptor instead.
func (*ImportExternalForwardsRequest) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{2}
}

func (x *ImportExternalForwardsRequest) GetForwards() []*ExportedForward {
	if x != nil {
		return x.Forwards
	}
	return nil
}

type ImportExternalForwardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportExternalForwardsResponse) Reset() {
	*x = ImportExternalForwardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_history_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportExternalForwardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportExternalForwardsResponse) ProtoMessage() {}

func (x *ImportExternalForwardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportExternalForwardsResponse.ProtoReflect.Descriptor instead.
func (*ImportExternalForwardsResponse) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{3}
}

type ExportedForward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token          string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Nodeid         []byte `protobuf:"bytes,2,opt,name=nodeid,proto3" json:"nodeid,omitempty"`
	ExternalNodeid []byte `protobuf:"bytes,3,opt,name=external_nodeid,json=externalNodeid,proto3" json:"external_nodeid,omitempty"`
	// Nanoseconds since epoch
	ResolvedTime int64  `protobuf:"varint,4,opt,name=resolved_time,json=resolvedTime,proto3" json:"resolved_time,omitempty"`
	Direction    string `protobuf:"bytes,5,opt,name=direction,proto3" json:"direction,omitempty"`
	AmountMsat   uint64 `protobuf:"varint,6,opt,name=amount_msat,json=amountMsat,proto3" json:"amount_msat,omitempty"`
}

func (x *ExportedForward) Reset() {
	*x = ExportedForward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_history_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportedForward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportedForward) ProtoMessage() {}

func (x *ExportedForward) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportedForward.ProtoReflect.Descriptor instead.
func (*ExportedForward) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{4}
}

func (x *ExportedForward) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ExportedForward) GetNodeid() []byte {
	if x != nil {
		return x.Nodeid
	}
	return nil
}

func (x *ExportedForward) GetExternalNodeid() []byte {
	if x != nil {
		return x.ExternalNodeid
	}
	return nil
}

func (x *ExportedForward) GetResolvedTime() int64 {
	if x != nil {
		return x.ResolvedTime
	}
	return 0
}

func (x *ExportedForward) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *ExportedForward) GetAmountMsat() uint64 {
	if x != nil {
		return x.AmountMsat
	}
	return 0
}

type GetRevenueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start unix timestamp (seconds)
	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// End unix timestamp (seconds)
	End int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *GetRevenueRequest) Reset() {
	*x = GetRevenueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_history_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevenueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevenueRequest) ProtoMessage() {}

func (x *GetRevenueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevenueRequest.ProtoReflect.Descriptor instead.
func (*GetRevenueRequest) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{5}
}

func (x *GetRevenueRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *GetRevenueRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type GetRevenueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total fees associated to tokens where the client was the recipient.
	TotalReceiveFeesMsat uint64 `protobuf:"varint,1,opt,name=total_receive_fees_msat,json=totalReceiveFeesMsat,proto3" json:"total_receive_fees_msat,omitempty"`
	// Total amount of forwards associated to tokens where the client was the recipient.
	TotalReceiveForwardCount uint64 `protobuf:"varint,2,opt,name=total_receive_forward_count,json=totalReceiveForwardCount,proto3" json:"total_receive_forward_count,omitempty"`
	// Total forwarded amount (msat) associated to tokens where the client was the recipient.
	TotalReceiveForwardedAmount uint64 `protobuf:"varint,3,opt,name=total_receive_forwarded_amount,json=totalReceiveForwardedAmount,proto3" json:"total_receive_forwarded_amount,omitempty"`
	// Total fees associated to tokens where the client was the sender.
	TotalSendFeesMsat uint64 `protobuf:"varint,4,opt,name=total_send_fees_msat,json=totalSendFeesMsat,proto3" json:"total_send_fees_msat,omitempty"`
	// Total amount of forwards associated to tokens where the client was the sender.
	TotalSendForwardCount uint64 `protobuf:"varint,5,opt,name=total_send_forward_count,json=totalSendForwardCount,proto3" json:"total_send_forward_count,omitempty"`
	// Total forwarded amount (msat) associated to tokens where the client was the sender.
	TotalSendForwardedAmount uint64 `protobuf:"varint,6,opt,name=total_send_forwarded_amount,json=totalSendForwardedAmount,proto3" json:"total_send_forwarded_amount,omitempty"`
	// Revenue per token
	TokenRevenues map[string]*TokenRevenue `protobuf:"bytes,7,rep,name=token_revenues,json=tokenRevenues,proto3" json:"token_revenues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetRevenueResponse) Reset() {
	*x = GetRevenueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_history_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevenueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevenueResponse) ProtoMessage() {}

func (x *GetRevenueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevenueResponse.ProtoReflect.Descriptor instead.
func (*GetRevenueResponse) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{6}
}

func (x *GetRevenueResponse) GetTotalReceiveFeesMsat() uint64 {
	if x != nil {
		return x.TotalReceiveFeesMsat
	}
	return 0
}

func (x *GetRevenueResponse) GetTotalReceiveForwardCount() uint64 {
	if x != nil {
		return x.TotalReceiveForwardCount
	}
	return 0
}

func (x *GetRevenueResponse) GetTotalReceiveForwardedAmount() uint64 {
	if x != nil {
		return x.TotalReceiveForwardedAmount
	}
	return 0
}

func (x *GetRevenueResponse) GetTotalSendFeesMsat() uint64 {
	if x != nil {
		return x.TotalSendFeesMsat
	}
	return 0
}

func (x *GetRevenueResponse) GetTotalSendForwardCount() uint64 {
	if x != nil {
		return x.TotalSendForwardCount
	}
	return 0
}

func (x *GetRevenueResponse) GetTotalSendForwardedAmount() uint64 {
	if x != nil {
		return x.TotalSendForwardedAmount
	}
	return 0
}

func (x *GetRevenueResponse) GetTokenRevenues() map[string]*TokenRevenue {
	if x != nil {
		return x.TokenRevenues
	}
	return nil
}

type TokenRevenue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total fees associated to this token where the client was the recipient.
	TotalReceiveFeesMsat uint64 `protobuf:"varint,1,opt,name=total_receive_fees_msat,json=totalReceiveFeesMsat,proto3" json:"total_receive_fees_msat,omitempty"`
	// Total amount of forwards associated to this token where the client was the recipient.
	TotalReceiveForwardCount uint64 `protobuf:"varint,2,opt,name=total_receive_forward_count,json=totalReceiveForwardCount,proto3" json:"total_receive_forward_count,omitempty"`
	// Total forwarded amount (msat) associated to this token where the client was the recipient.
	TotalReceiveForwardedAmount uint64 `protobuf:"varint,3,opt,name=total_receive_forwarded_amount,json=totalReceiveForwardedAmount,proto3" json:"total_receive_forwarded_amount,omitempty"`
	// Total fees associated to this token where the client was the recipient, but where a token was also associated on the sender side.
	TotalReceiveFeesAlsoSendMsat uint64 `protobuf:"varint,4,opt,name=total_receive_fees_also_send_msat,json=totalReceiveFeesAlsoSendMsat,proto3" json:"total_receive_fees_also_send_msat,omitempty"`
	// Total fees associated to this token that were part of channel open fees.
	TotalChannelOpenFees uint64 `protobuf:"varint,5,opt,name=total_channel_open_fees,json=totalChannelOpenFees,proto3" json:"total_channel_open_fees,omitempty"`
	// total_receive_fees_msat - (total_receive_fees_also_send_msat / 2) - total_channel_open_fees
	AdjustedTotalReceiveFeesMsat uint64 `protobuf:"varint,6,opt,name=adjusted_total_receive_fees_msat,json=adjustedTotalReceiveFeesMsat,proto3" json:"adjusted_total_receive_fees_msat,omitempty"`
	// Total fees associated to this token where the client was the sender.
	TotalSendFeesMsat uint64 `protobuf:"varint,7,opt,name=total_send_fees_msat,json=totalSendFeesMsat,proto3" json:"total_send_fees_msat,omitempty"`
	// Total amount of forwards associated to this token where the client was the sender.
	TotalSendForwardCount uint64 `protobuf:"varint,8,opt,name=total_send_forward_count,json=totalSendForwardCount,proto3" json:"total_send_forward_count,omitempty"`
	// Total forwarded amount (msat) associated to this token where the client was the sender.
	TotalSendForwardedAmount uint64 `protobuf:"varint,9,opt,name=total_send_forwarded_amount,json=totalSendForwardedAmount,proto3" json:"total_send_forwarded_amount,omitempty"`
	// Total fees associated to this token where the client was the sender, but where a token was also associated on the recipient side.
	TotalSendFeesAlsoReceiveMsat uint64 `protobuf:"varint,10,opt,name=total_send_fees_also_receive_msat,json=totalSendFeesAlsoReceiveMsat,proto3" json:"total_send_fees_also_receive_msat,omitempty"`
	// total_send_fees_msat - (total_send_fees_also_receive_msat / 2)
	AdjustedTotalSendFeesMsat uint64 `protobuf:"varint,11,opt,name=adjusted_total_send_fees_msat,json=adjustedTotalSendFeesMsat,proto3" json:"adjusted_total_send_fees_msat,omitempty"`
	// The used token (=hash of api key)
	Token string `protobuf:"bytes,12,opt,name=token,proto3" json:"token,omitempty"`
	// Revenue per node for this token
	NodeRevenues map[string]*NodeRevenue `protobuf:"bytes,13,rep,name=node_revenues,json=nodeRevenues,proto3" json:"node_revenues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TokenRevenue) Reset() {
	*x = TokenRevenue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_history_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenRevenue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenRevenue) ProtoMessage() {}

func (x *TokenRevenue) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenRevenue.ProtoReflect.Descriptor instead.
func (*TokenRevenue) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{7}
}

func (x *TokenRevenue) GetTotalReceiveFeesMsat() uint64 {
	if x != nil {
		return x.TotalReceiveFeesMsat
	}
	return 0
}

func (x *TokenRevenue) GetTotalReceiveForwardCount() uint64 {
	if x != nil {
		return x.TotalReceiveForwardCount
	}
	return 0
}

func (x *TokenRevenue) GetTotalReceiveForwardedAmount() uint64 {
	if x != nil {
		return x.TotalReceiveForwardedAmount
	}
	return 0
}

func (x *TokenRevenue) GetTotalReceiveFeesAlsoSendMsat() uint64 {
	if x != nil {
		return x.TotalReceiveFeesAlsoSendMsat
	}
	return 0
}

func (x *TokenRevenue) GetTotalChannelOpenFees() uint64 {
	if x != nil {
		return x.TotalChannelOpenFees
	}
	return 0
}

func (x *TokenRevenue) GetAdjustedTotalReceiveFeesMsat() uint64 {
	if x != nil {
		return x.AdjustedTotalReceiveFeesMsat
	}
	return 0
}

func (x *TokenRevenue) GetTotalSendFeesMsat() uint64 {
	if x != nil {
		return x.TotalSendFeesMsat
	}
	return 0
}

func (x *TokenRevenue) GetTotalSendForwardCount() uint64 {
	if x != nil {
		return x.TotalSendForwardCount
	}
	return 0
}

func (x *TokenRevenue) GetTotalSendForwardedAmount() uint64 {
	if x != nil {
		return x.TotalSendForwardedAmount
	}
	return 0
}

func (x *TokenRevenue) GetTotalSendFeesAlsoReceiveMsat() uint64 {
	if x != nil {
		return x.TotalSendFeesAlsoReceiveMsat
	}
	return 0
}

func (x *TokenRevenue) GetAdjustedTotalSendFeesMsat() uint64 {
	if x != nil {
		return x.AdjustedTotalSendFeesMsat
	}
	return 0
}

func (x *TokenRevenue) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TokenRevenue) GetNodeRevenues() map[string]*NodeRevenue {
	if x != nil {
		return x.NodeRevenues
	}
	return nil
}

type NodeRevenue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total fees on this node associated to this token where the client was the recipient.
	TotalReceiveFeesMsat uint64 `protobuf:"varint,1,opt,name=total_receive_fees_msat,json=totalReceiveFeesMsat,proto3" json:"total_receive_fees_msat,omitempty"`
	// Total amount of forwards on this node associated to this token where the client was the recipient.
	TotalReceiveForwardCount uint64 `protobuf:"varint,2,opt,name=total_receive_forward_count,json=totalReceiveForwardCount,proto3" json:"total_receive_forward_count,omitempty"`
	// Total forwarded amount (msat) on this node associated to this token where the client was the recipient.
	TotalReceiveForwardedAmount uint64 `protobuf:"varint,3,opt,name=total_receive_forwarded_amount,json=totalReceiveForwardedAmount,proto3" json:"total_receive_forwarded_amount,omitempty"`
	// Total fees on this node associated to this token where the client was the sender.
	TotalSendFeesMsat uint64 `protobuf:"varint,4,opt,name=total_send_fees_msat,json=totalSendFeesMsat,proto3" json:"total_send_fees_msat,omitempty"`
	// Total amount of forwards on this node associated to this token where the client was the sender.
	TotalSendForwardCount uint64 `protobuf:"varint,5,opt,name=total_send_forward_count,json=totalSendForwardCount,proto3" json:"total_send_forward_count,omitempty"`
	// Total forwarded amount (msat) on this node associated to this token where the client was the sender.
	TotalSendForwardedAmount uint64 `protobuf:"varint,6,opt,name=total_send_forwarded_amount,json=totalSendForwardedAmount,proto3" json:"total_send_forwarded_amount,omitempty"`
	// Node id of the lsp that routed the payments.
	NodeId string `protobuf:"bytes,7,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Revenue from routing to/from connected lsps that used the same token.
	ExternalRevenues map[string]*ExternalRevenue `protobuf:"bytes,8,rep,name=external_revenues,json=externalRevenues,proto3" json:"external_revenues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NodeRevenue) Reset() {
	*x = NodeRevenue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_history_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRevenue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRevenue) ProtoMessage() {}

func (x *NodeRevenue) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRevenue.ProtoReflect.Descriptor instead.
func (*NodeRevenue) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{8}
}

func (x *NodeRevenue) GetTotalReceiveFeesMsat() uint64 {
	if x != nil {
		return x.TotalReceiveFeesMsat
	}
	return 0
}

func (x *NodeRevenue) GetTotalReceiveForwardCount() uint64 {
	if x != nil {
		return x.TotalReceiveForwardCount
	}
	return 0
}

func (x *NodeRevenue) GetTotalReceiveForwardedAmount() uint64 {
	if x != nil {
		return x.TotalReceiveForwardedAmount
	}
	return 0
}

func (x *NodeRevenue) GetTotalSendFeesMsat() uint64 {
	if x != nil {
		return x.TotalSendFeesMsat
	}
	return 0
}

func (x *NodeRevenue) GetTotalSendForwardCount() uint64 {
	if x != nil {
		return x.TotalSendForwardCount
	}
	return 0
}

func (x *NodeRevenue) GetTotalSendForwardedAmount() uint64 {
	if x != nil {
		return x.TotalSendForwardedAmount
	}
	return 0
}

func (x *NodeRevenue) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeRevenue) GetExternalRevenues() map[string]*ExternalRevenue {
	if x != nil {
		return x.ExternalRevenues
	}
	return nil
}

type ExternalRevenue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total fees on this node associated to this token where the client was the recipient and was connected to this external node.
	TotalReceiveFeesMsat uint64 `protobuf:"varint,1,opt,name=total_receive_fees_msat,json=totalReceiveFeesMsat,proto3" json:"total_receive_fees_msat,omitempty"`
	// Total amount of forwards on this node associated to this token where the client was the recipient and was connected to this external node.
	TotalReceiveForwardCount uint64 `protobuf:"varint,2,opt,name=total_receive_forward_count,json=totalReceiveForwardCount,proto3" json:"total_receive_forward_count,omitempty"`
	// Total forwarded amount (msat) on this node associated to this token where the client was the recipient and was connected to this external node.
	TotalReceiveForwardedAmount uint64 `protobuf:"varint,3,opt,name=total_receive_forwarded_amount,json=totalReceiveForwardedAmount,proto3" json:"total_receive_forwarded_amount,omitempty"`
	// Total fees on this node associated to this token where the client was the sender and was connected to this external node.
	TotalSendFeesMsat uint64 `protobuf:"varint,4,opt,name=total_send_fees_msat,json=totalSendFeesMsat,proto3" json:"total_send_fees_msat,omitempty"`
	// Total amount of forwards on this node associated to this token where the client was the sender and was connected to this external node.
	TotalSendForwardCount uint64 `protobuf:"varint,5,opt,name=total_send_forward_count,json=totalSendForwardCount,proto3" json:"total_send_forward_count,omitempty"`
	// Total forwarded amount (msat) on this node associated to this token where the client was the sender and was connected to this external node.
	TotalSendForwardedAmount uint64 `protobuf:"varint,6,opt,name=total_send_forwarded_amount,json=totalSendForwardedAmount,proto3" json:"total_send_forwarded_amount,omitempty"`
	// Node id of the external lsp.
	ExternalNodeId string `protobuf:"bytes,7,opt,name=external_node_id,json=externalNodeId,proto3" json:"external_node_id,omitempty"`
}

func (x *ExternalRevenue) Reset() {
	*x = ExternalRevenue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_history_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalRevenue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalRevenue) ProtoMessage() {}

func (x *ExternalRevenue) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalRevenue.ProtoReflect.Descriptor instead.
func (*ExternalRevenue) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{9}
}

func (x *ExternalRevenue) GetTotalReceiveFeesMsat() uint64 {
	if x != nil {
		return x.TotalReceiveFeesMsat
	}
	return 0
}

func (x *ExternalRevenue) GetTotalReceiveForwardCount() uint64 {
	if x != nil {
		return x.TotalReceiveForwardCount
	}
	return 0
}

func (x *ExternalRevenue) GetTotalReceiveForwardedAmount() uint64 {
	if x != nil {
		return x.TotalReceiveForwardedAmount
	}
	return 0
}

func (x *ExternalRevenue) GetTotalSendFeesMsat() uint64 {
	if x != nil {
		return x.TotalSendFeesMsat
	}
	return 0
}

func (x *ExternalRevenue) GetTotalSendForwardCount() uint64 {
	if x != nil {
		return x.TotalSendForwardCount
	}
	return 0
}

func (x *ExternalRevenue) GetTotalSendForwardedAmount() uint64 {
	if x != nil {
		return x.TotalSendForwardedAmount
	}
	return 0
}

func (x *ExternalRevenue) GetExternalNodeId() string {
	if x != nil {
		return x.ExternalNodeId
	}
	return ""
}

var File_history_proto protoreflect.FileDescriptor

var file_history_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x80, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x16, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x55, 0x0a, 0x1d, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x08,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x73, 0x61, 0x74, 0x22, 0x3b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x22, 0xa8, 0x04, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x6d, 0x73,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x73, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x3d,
	0x0a, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a,
	0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x73, 0x4d,
	0x73, 0x61, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x0e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x73, 0x1a, 0x57, 0x0a, 0x12, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x07, 0x0a, 0x0c,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x17,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x65,
	0x65, 0x73, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x73, 0x4d,
	0x73, 0x61, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x21, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x61, 0x6c,
	0x73, 0x6f, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x46, 0x65, 0x65, 0x73, 0x41, 0x6c, 0x73, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x61, 0x74,
	0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f,
	0x70, 0x65, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x1c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x73, 0x4d, 0x73, 0x61, 0x74, 0x12,
	0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65,
	0x65, 0x73, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x73, 0x4d, 0x73, 0x61, 0x74,
	0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x21, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x73, 0x6f,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x65,
	0x65, 0x73, 0x41, 0x6c, 0x73, 0x6f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x73, 0x61,
	0x74, 0x12, 0x40, 0x0a, 0x1d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x6d, 0x73,
	0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x73, 0x4d,
	0x73, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x1a, 0x55, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc2,
	0x04, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x35,
	0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x66, 0x65, 0x65, 0x73, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65,
	0x73, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x6d, 0x73, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65,
	0x6e, 0x64, 0x46, 0x65, 0x65, 0x73, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x65, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x11, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x73, 0x1a, 0x5d, 0x0a, 0x15, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x9f, 0x03, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x6d, 0x73,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x73, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x3d,
	0x0a, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a,
	0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x73, 0x4d,
	0x73, 0x61, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x32, 0x94, 0x02, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x53, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x1e, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x16, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x26, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x12, 0x1a, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1f, 0x5a, 0x1d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x65, 0x65, 0x7a,
	0x2f, 0x6c, 0x73, 0x70, 0x64, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_history_proto_rawDescOnce sync.Once
	file_history_proto_rawDescData = file_history_proto_rawDesc
)

func file_history_proto_rawDescGZIP() []byte {
	file_history_proto_rawDescOnce.Do(func() {
		file_history_proto_rawDescData = protoimpl.X.CompressGZIP(file_history_proto_rawDescData)
	})
	return file_history_proto_rawDescData
}

var file_history_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_history_proto_goTypes = []interface{}{
	(*ExportForwardsRequest)(nil),          // 0: history.ExportForwardsRequest
	(*ExportForwardsResponse)(nil),         // 1: history.ExportForwardsResponse
	(*ImportExternalForwardsRequest)(nil),  // 2: history.ImportExternalForwardsRequest
	(*ImportExternalForwardsResponse)(nil), // 3: history.ImportExternalForwardsResponse
	(*ExportedForward)(nil),                // 4: history.ExportedForward
	(*GetRevenueRequest)(nil),              // 5: history.GetRevenueRequest
	(*GetRevenueResponse)(nil),             // 6: history.GetRevenueResponse
	(*TokenRevenue)(nil),                   // 7: history.TokenRevenue
	(*NodeRevenue)(nil),                    // 8: history.NodeRevenue
	(*ExternalRevenue)(nil),                // 9: history.ExternalRevenue
	nil,                                    // 10: history.GetRevenueResponse.TokenRevenuesEntry
	nil,                                    // 11: history.TokenRevenue.NodeRevenuesEntry
	nil,                                    // 12: history.NodeRevenue.ExternalRevenuesEntry
}
var file_history_proto_depIdxs = []int32{
	4,  // 0: history.ExportForwardsResponse.forwards:type_name -> history.ExportedForward
	4,  // 1: history.ImportExternalForwardsRequest.forwards:type_name -> history.ExportedForward
	10, // 2: history.GetRevenueResponse.token_revenues:type_name -> history.GetRevenueResponse.TokenRevenuesEntry
	11, // 3: history.TokenRevenue.node_revenues:type_name -> history.TokenRevenue.NodeRevenuesEntry
	12, // 4: history.NodeRevenue.external_revenues:type_name -> history.NodeRevenue.ExternalRevenuesEntry
	7,  // 5: history.GetRevenueResponse.TokenRevenuesEntry.value:type_name -> history.TokenRevenue
	8,  // 6: history.TokenRevenue.NodeRevenuesEntry.value:type_name -> history.NodeRevenue
	9,  // 7: history.NodeRevenue.ExternalRevenuesEntry.value:type_name -> history.ExternalRevenue
	0,  // 8: history.History.ExportForwards:input_type -> history.ExportForwardsRequest
	2,  // 9: history.History.ImportExternalForwards:input_type -> history.ImportExternalForwardsRequest
	5,  // 10: history.History.GetRevenue:input_type -> history.GetRevenueRequest
	1,  // 11: history.History.ExportForwards:output_type -> history.ExportForwardsResponse
	3,  // 12: history.History.ImportExternalForwards:output_type -> history.ImportExternalForwardsResponse
	6,  // 13: history.History.GetRevenue:output_type -> history.GetRevenueResponse
	11, // [11:14] is the sub-list for method output_type
	8,  // [8:11] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_history_proto_init() }
func file_history_proto_init() {
	if File_history_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_history_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportForwardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_history_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportForwardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_history_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportExternalForwardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_history_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportExternalForwardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_history_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportedForward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_history_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevenueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_history_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevenueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_history_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenRevenue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_history_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRevenue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_history_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalRevenue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_history_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_history_proto_goTypes,
		DependencyIndexes: file_history_proto_depIdxs,
		MessageInfos:      file_history_proto_msgTypes,
	}.Build()
	File_history_proto = out.File
	file_history_proto_rawDesc = nil
	file_history_proto_goTypes = nil
	file_history_proto_depIdxs = nil
}
